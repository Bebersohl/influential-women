{"version":3,"sources":["PersonImage.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["wiki","wikijs","PersonImage","name","useState","image","setImage","loading","setLoading","useEffect","explorerImage","localStorage","getItem","page","then","mainImage","window","setItem","catch","err","console","log","finally","imageStyle","height","alignSelf","borderRadius","marginTop","defaultImage","src","style","alt","onError","validateImage","ErrorBoundary","props","state","hasError","error","errorInfo","this","children","React","Component","listName","initialIndex","clamp","Number","val","min","max","App","explorers","setExplorers","explorerIndex","setExplorerIndex","explorersList","JSON","parse","tables","stringify","length","explorer","buttonStyle","margin","className","Paper","padding","width","display","flexDirection","minHeight","position","Typography","variant","Link","href","target","rel","born","died","nationality","bottom","justifyContent","alignItems","Button","color","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAGMA,EAAOC,MA6DEC,MA3Df,YAAgC,IAATC,EAAQ,EAARA,KAAQ,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OAECF,oBAAS,GAFV,mBAEtBG,EAFsB,KAEbC,EAFa,KAI7BC,qBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAAQT,GAE3C,GAAIO,EAAe,OAAOJ,EAASI,GAEnCF,GAAW,GAEXR,EACGa,KAAKV,GACLW,MAAK,SAAAD,GAAI,OAAIA,EAAKE,eAClBD,MAAK,SAAAT,GACJW,OAAOL,aAAaM,QAAQd,EAAME,GAElCC,EAASD,MAEVa,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,GAErBb,EAAS,OAEVgB,SAAQ,WACPd,GAAW,QAEd,CAACL,IAEJ,IAAMoB,EAAa,CACjBC,OAAQ,IACRC,UAAW,SACXC,aAAc,MACdC,UAAW,IAGPC,EACJ,0EAQF,OAAKvB,GAASE,EACL,yBAAKsB,IAAKD,EAAcE,MAAOP,EAAYQ,IAAK5B,IAIvD,yBACE6B,QAAS,kBAAMZ,QAAQC,IAAI,gBAC3BS,MAAOP,EACPM,IAdJ,SAAuBxB,GACrB,MAAc,cAAVA,EAA8BuB,EAE3BvB,EAWA4B,CAAc5B,GACnB0B,IAAK5B,K,gFC/BI+B,E,YAzBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,GAFR,E,+EAUDC,EAAOC,GAEvBnB,QAAQC,IAAI,W,+BAIZ,OAAImB,KAAKJ,MAAMC,SAEN,qDAGFG,KAAKL,MAAMM,Y,gDAhBYH,GAE9B,MAAO,CAAED,UAAU,O,GARKK,IAAMC,WCQ5BC,EAAW,yCAEXC,EAAeC,EACnBC,OAAO/B,OAAOL,aAAaC,QAAQ,kBAAyB,EAC5D,EACA,IAGIZ,EAAOC,MAEb,SAAS6C,EAAME,EAAKC,EAAKC,GACvB,OAAIF,EAAME,EAAY,EAElBF,EAAMC,EAAY,GAEfD,EAoFMG,MAjFf,WAAgB,IAAD,EACqB/C,mBAAS,IAD9B,mBACNgD,EADM,KACKC,EADL,OAE6BjD,mBAASyC,GAFtC,mBAENS,EAFM,KAESC,EAFT,KA0Bb,GAtBA9C,qBAAU,WACRO,OAAOL,aAAaM,QAAQ,gBAAiBqC,KAC5C,CAACA,IAEJ7C,qBAAU,WACR,IAAM+C,EAAgB7C,aAAaC,QAAQgC,GAE3C,GAAIY,EAAe,OAAOH,EAAaI,KAAKC,MAAMF,IAElDxD,EACGa,KAAK+B,GACL9B,MAAK,SAAAD,GAAI,OAAIA,EAAK8C,YAClB7C,MAAK,SAAA6C,GACJ3C,OAAOL,aAAaM,QAAQ2B,EAAUa,KAAKG,UAAUD,EAAO,KAC5DN,EAAaM,EAAO,OAErBzC,OAAM,SAAAC,GACLC,QAAQC,IAAI,WAAYF,QAG3B,KAEEiC,EAAUS,OAAQ,OAAO,yCAE9B,IAAMC,EAAWV,EAAUE,GAErBS,EAAc,CAAEC,OAAQ,IAC9B,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CACEpC,MAAO,CACLqC,QAAS,GACTC,MAAO,IACPC,QAAS,OACTC,cAAe,SACfC,UAAW,IACXC,SAAU,aAGZ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAClB,kBAACC,EAAA,EAAD,CACEC,KAAI,wCAAmCd,EAAS3D,MAChD0E,OAAO,SACPC,IAAI,uBAEHhB,EAAS3D,OAGd,kBAACsE,EAAA,EAAD,CAAYC,QAAQ,WACjBZ,EAASiB,KADZ,MACqBjB,EAASkB,MAAQ,WAEtC,kBAACP,EAAA,EAAD,CAAYC,QAAQ,WAAWZ,EAASmB,aACxC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAa9E,KAAM2D,EAAS3D,QAE5B,kBAACsE,EAAA,EAAD,CAAY3C,MAAO,CAAEqC,QAAS,iBAAkBO,QAAQ,SAASZ,EAAS,kBAC1E,yBAAKhC,MAAO,CAAE0C,SAAU,WAAYU,OAAQ,EAAGb,QAAS,OAAQc,eAAgB,SAAUC,WAAY,SAAUhB,MAAO,SACrH,kBAACiB,EAAA,EAAD,CACEC,MAAM,UACNxD,MAAOiC,EACPwB,QAAS,kBAAMhC,EAAiBT,EAAMQ,EAAgB,EAAG,EAAG,OAH9D,QAOA,kBAAC+B,EAAA,EAAD,CACEC,MAAM,UACNxD,MAAOiC,EACPwB,QAAS,kBAAMhC,EAAiBT,EAAMQ,EAAgB,EAAG,EAAG,OAH9D,YCpFUkC,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,MAAK,SAAAqF,GACjCA,EAAaC,kB","file":"static/js/main.c2622e28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport wikijs from 'wikijs';\n\nconst wiki = wikijs();\n\nfunction PersonImage({ name }) {\n  const [image, setImage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const explorerImage = localStorage.getItem(name);\n\n    if (explorerImage) return setImage(explorerImage);\n\n    setLoading(true);\n\n    wiki\n      .page(name)\n      .then(page => page.mainImage())\n      .then(image => {\n        window.localStorage.setItem(name, image);\n\n        setImage(image);\n      })\n      .catch(err => {\n        console.log('image', err);\n\n        setImage('');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [name]);\n\n  const imageStyle = {\n    height: 300,\n    alignSelf: 'center',\n    borderRadius: '4px',\n    marginTop: 10\n  };\n\n  const defaultImage =\n    'https://upload.wikimedia.org/wikipedia/en/b/b1/Portrait_placeholder.png';\n\n  function validateImage(image) {\n    if (image === 'undefined') return defaultImage;\n\n    return image;\n  }\n\n  if (!image || loading) {\n    return <img src={defaultImage} style={imageStyle} alt={name} />;\n  }\n\n  return (\n    <img\n      onError={() => console.log('image error')}\n      style={imageStyle}\n      src={validateImage(image)}\n      alt={name}\n    />\n  );\n}\n\nexport default PersonImage;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log('error');\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport wikijs from 'wikijs';\nimport PersonImage from './PersonImage';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst listName = 'List_of_female_explorers_and_travelers';\n\nconst initialIndex = clamp(\n  Number(window.localStorage.getItem('explorerIndex' || 0)) + 1,\n  0,\n  72\n);\n\nconst wiki = wikijs();\n\nfunction clamp(val, min, max) {\n  if (val > max) return 0;\n\n  if (val < min) return 72;\n\n  return val;\n}\n\nfunction App() {\n  const [explorers, setExplorers] = useState([]);\n  const [explorerIndex, setExplorerIndex] = useState(initialIndex);\n\n  useEffect(() => {\n    window.localStorage.setItem('explorerIndex', explorerIndex);\n  }, [explorerIndex]);\n\n  useEffect(() => {\n    const explorersList = localStorage.getItem(listName);\n\n    if (explorersList) return setExplorers(JSON.parse(explorersList));\n\n    wiki\n      .page(listName)\n      .then(page => page.tables())\n      .then(tables => {\n        window.localStorage.setItem(listName, JSON.stringify(tables[0]));\n        setExplorers(tables[0]);\n      })\n      .catch(err => {\n        console.log('explorer', err);\n\n      });\n  }, []);\n\n  if (!explorers.length) return <p>loading...</p>;\n\n  const explorer = explorers[explorerIndex];\n\n  const buttonStyle = { margin: 10}\n  return (\n    <div className=\"App\">\n      <Paper\n        style={{\n          padding: 15,\n          width: 600,\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: 540,\n          position: 'relative',\n        }}\n      >\n        <Typography variant=\"h4\">\n          <Link\n            href={`https://en.wikipedia.org/wiki/${explorer.name}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {explorer.name}\n          </Link>\n        </Typography>\n        <Typography variant=\"caption\">\n          {explorer.born} - {explorer.died || 'Present'}\n        </Typography>\n        <Typography variant=\"caption\">{explorer.nationality}</Typography>\n        <ErrorBoundary>\n        <PersonImage name={explorer.name} />\n        </ErrorBoundary>\n        <Typography style={{ padding: '30px 0 15px 0'}} variant=\"body1\">{explorer['achievement/s']}</Typography>\n        <div style={{ position: 'absolute', bottom: 0, display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%'}}>\n          <Button\n            color=\"primary\"\n            style={buttonStyle}\n            onClick={() => setExplorerIndex(clamp(explorerIndex - 1, 0, 72))}\n          >\n            Back\n          </Button>\n          <Button\n            color=\"primary\"\n            style={buttonStyle}\n            onClick={() => setExplorerIndex(clamp(explorerIndex + 1, 0, 72))}\n          >\n            Next\n          </Button>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}